/* Generated By:JJTree: Do not edit this line. ASTParameter.java */

package uchicago.src.sim.parameter.rpl;

public class ASTParameter extends SimpleNode {

  private String name;
  private ASTlist list = null;
  private boolean isName = false;
  private RPLObject start, end;
  private RPLObject increment = new RPLIntValue(1);
  private RPLParameter parameter = null;

  public ASTParameter(int id) {
    super(id);
  }

  public ASTParameter(RPLParser p, int id) {
    super(p, id);
  }

  public void preProcess(RPLCompiler compiler) {
    name = (String)children[0].getInfo();
    compiler.addParameterName(name);
    int numChildren = jjtGetNumChildren();

    if (numChildren == 2) {
      // second child is a list
      SimpleNode node = (SimpleNode)children[1];
      if (node.id == RPLParserTreeConstants.JJTNAME) {
        isName = true;
      } else {
        list = (ASTlist)children[1];
        list.preProcess(compiler);
      }
    } else {
      start = children[1].getValue();
      end = children[2].getValue();
      if (numChildren == 4) {
        increment = children[3].getValue();
      }
    }
  }

  public void compile(RPLCompiler compiler) {
    if (list != null) {
      list.compile(compiler);
      parameter = RPLFactory.createParameter(name, list.getRPLList());
    } else if (isName) {
      String varName = children[1].getInfo().toString();
      Object obj = compiler.getGlobalVariable(varName);
      if (obj == null || !(obj instanceof RPLList)) {
        String message = "variable name '" +  varName + "' must refer to a list";
        throw compiler.createCompilerException(message, this.beginLine);
      }
      parameter = RPLFactory.createParameter(name, (RPLList)obj);

    } else {
      // resolve any references to java classes if necessary
      start.compile(compiler);
      end.compile(compiler);
      increment.compile(compiler);
      try {
        parameter = RPLFactory.createParameter(name, start, end, increment);

      } catch (ClassCastException ex) {
        throw compiler.createCompilerException(ex.getMessage(), this.beginLine);
      } catch (IllegalArgumentException ex) {
        throw compiler.createCompilerException(ex.getMessage(), this.beginLine);
      }
    }
  }

  public String getName() {
    return name;
  }

  public RPLParameter getRPLParameter() {
    return parameter;
  }
}
