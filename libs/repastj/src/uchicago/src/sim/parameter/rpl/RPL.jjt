options {

   NODE_SCOPE_HOOK = true;                  // call jjtree*NodeScope()
   STATIC = false;                          // multiple parsers
   COMMON_TOKEN_ACTION = true;              // CommonTokenAction(Token)
   NODE_PACKAGE="uchicago.src.sim.parameter.rpl";
   MULTI=true;
}

PARSER_BEGIN(RPLParser)
package uchicago.src.sim.parameter.rpl;

public class RPLParser {
  void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).beginLine = getToken(1).beginLine;
        ((SimpleNode)n).beginColumn = getToken(1).beginColumn;
    }

    void jjtreeCloseNodeScope(Node n) {
        ((SimpleNode)n).endLine = getToken(0).endLine;
        ((SimpleNode)n).endColumn = getToken(0).endColumn;
    }


}

PARSER_END(RPLParser)

TOKEN_MGR_DECLS:
{
    int indentation[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;
    boolean seen_eof = false;
    boolean single_input = false;
    boolean interactive = false;
    boolean compound = false;
    public boolean forcedNewline = false;
    public boolean generator_allowed = false;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.image = "<DEDENT>";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        if (t.kind == EOF) {
            //System.out.println("EOF: "+single_input+", "+curLexState);
            if (!interactive) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                }
                else {
                    t.kind = DEDENT;
                    level -= 1;
                }
                while (level-- >= 0)
                    t = addDedent(t);
                //t = addDedent(t);
                if (!single_input) {
                    t.kind = EOF;
                    t.image = "<EOF>";
                } else {
                    t.kind = NEWLINE;
                    t.image = "<FORCENL>";
                }
            }
        }
    }
}


SKIP :
{
    <SPACE: " ">
|   "\t"
|   "\014"
|   <CONTINUATION: ("\\") ("\r\n"|"\n"|"\r")>
|   <NEWLINE1: ("\r\n"|"\n"|"\r")>
        {
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
        }
}


<FORCE_NEWLINE1> TOKEN :
{ <NEWLINE: ("\n" | "\r")> : INDENTATION_UNCHANGED }


<FORCE_NEWLINE2> TOKEN :
{ <NEWLINE2: ("\n" | "\r")> { matchedToken.kind = NEWLINE; }: INDENTING }


<FORCE_NEWLINE> TOKEN :
{
    <NEWLINE3: ("\n" | "\r")>
        {
            Token t1 = matchedToken;
            //System.out.println("final_newline: "+level);
            t1.kind = DEDENT;
            while (level-- > 0)
                t1 = addDedent(t1);
            t1.kind = NEWLINE;
        } : DEFAULT
}

<INDENTING, INDENTATION_UNCHANGED> SKIP :
{
    "\t"
        {
            indent = (indent/8+1)*8;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
        }
|   " "
        {
            indent += 1;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
        }
|   "\014"
        {
            indent = 0;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
        }
|   <CRLF1: ("\r\n" | "\n" | "\r")>
        {
            if (parens == 0 && single_input && indent==0) {
                //System.out.println("force newline");
                //backup a character!
                forcedNewline = true;
                if (interactive) {
                    input_stream.backup(1);
                    SwitchTo(FORCE_NEWLINE);
                } else {
                    SwitchTo(INDENTING);
                }
            }
            else {
                //doPrompt();
                indent = 0;
                if (indent == indentation[level])
                    SwitchTo(INDENTATION_UNCHANGED);
                else
                    SwitchTo(INDENTING);
            }
        }
}



<INDENTATION_UNCHANGED> SKIP :
{
    <""> : DEFAULT
}


<INDENTING> TOKEN :
{
    <DEDENT: "">
        {
            if (indent > indentation[level]) {
                level++;
                indentation[level] = indent;
                matchedToken.kind=INDENT;
                matchedToken.image = "<INDENT>";
            }
            else if (level > 0) {
                Token t = matchedToken;
                level -= 1;
                while (level > 0 && indent < indentation[level]) {
                    level--;
                    t = addDedent(t);
                }
                if (indent != indentation[level]) {
                    throw new TokenMgrError("inconsistent dedent",
                                            t.endLine, t.endColumn);
                }
                t.next = null;
            }
        } : DEFAULT
}


<UNREACHABLE> TOKEN :
{
    < INDENT:"<INDENT>">
//|     < DEDENT:"<DEDENT>">
}


<DEFAULT> SPECIAL_TOKEN: /* COMMENTS */
{
    <TRAILING_COMMENT: "#" (~["\n","\r"])* >
}

<INDENTING, INDENTATION_UNCHANGED> SPECIAL_TOKEN: /* COMMENTS */
{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> {
        indent = 0;
        if (indent == indentation[level])
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }
}

TOKEN : /* SEPARATORS */
{
    < LPAREN: "(" > {parens++;}
|   < RPAREN: ")" > {parens--;}
|   < LBRACKET: "[" > {parens++;}
|   < RBRACKET: "]" > {parens--;}
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
}

/*
TOKEN :
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < FLOORDIVIDE: "//" >
|   < POWER: "**" >
|   < LSHIFT: "<<" >
|   < RSHIFT: ">>" >
|   < MODULO: "%" >
|   < NOT: "~" >
|   < XOR: "^" >
|   < OR: "|" >
|   < AND: "&" >
|   < EQUAL: "=" >
|   < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < LESSGREATER: "<>" >
|   < NOTEQUAL: "!=" >
|   < PLUSEQ: "+=" >
|   < MINUSEQ: "-=" >
|   < MULTIPLYEQ: "*=" >
|   < DIVIDEEQ: "/=" >
|   < FLOORDIVIDEEQ: "//=" >
|   < MODULOEQ: "%=" >
|   < ANDEQ: "&=" >
|   < OREQ: "|=" >
|   < XOREQ: "^=" >
|   < LSHIFTEQ: "<<=" >
|   < RSHIFTEQ: ">>=" >
|   < POWEREQ: "**=" >
}
*/

TOKEN: /* OPERATORS */
{
  < EQUAL: "=" >
}

/*
TOKEN :
{
    < OR_BOOL: "or" >
|   < AND_BOOL: "and" >
|   < NOT_BOOL: "not" >
|   < IS: "is" >
|   < IN: "in" >
|   < LAMBDA: "lambda" >
|   < IF: "if" >
|   < ELSE: "else" >
|   < ELIF: "elif" >
|   < WHILE: "while" >
|   < FOR: "for" >
|   < TRY: "try" >
|   < EXCEPT: "except" >
|   < DEF: "def" >
|   < CLASS: "class" >
|   < FINALLY: "finally" >
|   < PRINT: "print" >
|   < PASS: "pass" >
|   < BREAK: "break" >
|   < CONTINUE: "continue" >
|   < RETURN: "return" >
|   < YIELD: "yield" >
|   < IMPORT: "import" >
|   < FROM: "from" >
|   < DEL: "del" >
|   < RAISE: "raise" >
|   < GLOBAL: "global" >
|   < EXEC: "exec" >
|   < ASSERT: "assert" >
|   < AS: "as" >
}
*/

TOKEN: /* KEYWORDS */
{
  < DEF: "def">
| < PARAMETER: "parameter">
| < CONSTANT: "constant">
| < TRUE: "true" >
| < FALSE: "false" >
}

TOKEN : /* Python identifiers */
{
    < NAME: <LETTER> ( <LETTER> | <DIGIT>)* >
|   < #LETTER: ["_","a"-"z","A"-"Z"] >
}


// hack here for negative numbers, this should be bumped up to a real Neg Op.
TOKEN : /* Numeric literals */
{
    < DECNUMBER:
       ("-")? ["1"-"9"] (["0"-"9"])* (["l", "L"])?
      | "0"
      >
|   < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
|   < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
|
    < FLOAT:
       ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      >
|   < COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"]>
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < #DIGIT: ["0" - "9"] >
}

MORE : /* Strings */
{
    < (["u", "U"])? (["r", "R"])? "'" > :  IN_STRING11
|   < (["u", "U"])? (["r", "R"])? "\"" > :  IN_STRING21
|   < (["u", "U"])? (["r", "R"])? "'''" > :  IN_STRING13
|   < (["u", "U"])? (["r", "R"])? "\"\"\"" > :  IN_STRING23
}

<IN_STRING11> TOKEN : { <SINGLE_STRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING21> TOKEN : { <SINGLE_STRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING13> TOKEN : { <TRIPLE_STRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING23> TOKEN : { <TRIPLE_STRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_STRING11,IN_STRING21> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); }
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); }
}

<IN_STRING11> MORE: { <("\\" ("\\"|"'")) | ~["\n","\r"]> }
<IN_STRING21> MORE: { <("\\" ("\\"|"\"")) | ~["\n","\r"]> }

<IN_STRING13, IN_STRING23> MORE:
{
    <"\r\n"> {
        int l = image.length();
        image.setLength(l-1);
        image.setCharAt(l-2, '\n');
    }
|   <"\n">
|   <"\r"> { image.setCharAt(image.length()-1, '\n'); }
|   <~["\n","\r"]>
|   <"\\" ~["\n","\r"]>
}



SimpleNode compilationUnit() :
{ String name; }
{
  (<NEWLINE> | stmt())* <EOF>
  { return jjtThis;}
}


void stmt() #void: {}
{ simple_stmt() | compound_stmt() }


void simple_stmt() #void: {}
{ small_stmt() (LOOKAHEAD(2) <SEMICOLON> small_stmt())* [<SEMICOLON>] <NEWLINE>
}


void small_stmt() #void: {}
{
    Name() <EQUAL>
(
  Parameter() #param_assign(2)
| list() #list_assign(2)
| Constant() #const_assign(2)
)
}

void dn_number_string() #void: {}
{
  (

   tf_dotted_name()
  |
    String()
  |
    Number()
  )
}

void list() : {}
{
  <LBRACKET>
(
  dn_number_string() (<COMMA> dn_number_string())* <RBRACKET>

)
}

void tf_dotted_name() #void: {}
{
    <TRUE> #True
  | <FALSE> #False
  | dotted_name()
}

void dotted_name(): {}
{
  Name() <DOT> Name()
}

void compound_stmt() #void: {}
{
  blockdef()
}

void blockdef(): {}
{
  <DEF> Name() <COLON> suite()
}

void Constant(): {}
{
  <CONSTANT> <LPAREN> String() <COMMA> (LOOKAHEAD(2) tf_dotted_name() | Number() | String()) <RPAREN>
}

void subBlock(): {}
{
  Name() <COLON> suite()
}

void suite(): {}
{
  <NEWLINE> <INDENT> (Constant() | <NEWLINE>)* (LOOKAHEAD(2) subBlock() | Name()) (LOOKAHEAD(2) subBlock() | Name() | <NEWLINE>)* <DEDENT>
}


void Parameter(): {}
{
  <PARAMETER><LPAREN> String() <COMMA>
(
  LOOKAHEAD(2)
  (Name() | list()) <RPAREN>
| (dotted_name() | Number()) <COMMA> (dotted_name() | Number()) [<COMMA> (dotted_name() | Number())] <RPAREN>

)
}

void Name() #Name:
{
    Token t;
}
{
    t = <NAME> { jjtThis.setInfo(t.image); }
}

void Number() #void :
{
    Token t;
}
{
    (
        t=<HEXNUMBER> {
            jjtThis.setInteger(t.image.substring(2,t.image.length()), 16);
        }
    )#Int
|   (
        t=<OCTNUMBER> { jjtThis.setInteger(t.image, 8); }
    )#Int
|   (
        t=<DECNUMBER> { jjtThis.setInteger(t.image, 10); }
    )#Int
|   (
        t=<FLOAT> { jjtThis.setFloat(t.image); }
    )#Float
}

void String() #void :
{
    Token t;
}
{
    ( t=<SINGLE_STRING> { jjtThis.setString(t.image, 1); } )#String
|   ( t=<SINGLE_STRING2> { jjtThis.setString(t.image, 1); } )#String
|   ( t=<TRIPLE_STRING> { jjtThis.setString(t.image, 3); } )#String
|   ( t=<TRIPLE_STRING2> { jjtThis.setString(t.image, 3); } )#String
}

Token AnyName() #void:
{
    Token t;
}
{
    ( t= <NAME> { jjtThis.setInfo(t.image); return t; } {} )#Name
    /*
|   ( t = <OR_BOOL> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <AND_BOOL> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <NOT_BOOL> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <IS> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <IN> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <LAMBDA> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <IF> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <ELSE> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <ELIF> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <WHILE> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <FOR> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <TRY> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <EXCEPT> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <DEF> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <CLASS> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <FINALLY> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <PRINT> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <PASS> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <BREAK> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <CONTINUE> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <RETURN> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <YIELD> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <IMPORT> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <FROM> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <DEL> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <RAISE> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <GLOBAL> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <EXEC> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <ASSERT> { jjtThis.setInfo(t.image); return t; } {} )#Name
|   ( t = <AS> { jjtThis.setInfo(t.image); return t; } {} )#Name
*/
}


