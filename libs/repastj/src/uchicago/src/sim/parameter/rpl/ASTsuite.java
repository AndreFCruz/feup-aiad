/* Generated By:JJTree: Do not edit this line. ASTsuite.java */

package uchicago.src.sim.parameter.rpl;

import java.util.ArrayList;
import java.util.List;

public class ASTsuite extends SimpleNode {

  // list of constants -- ASTConstant
  private List constants = new ArrayList();

  // list of references to parameters or block defs -- Strings
  private List references = new ArrayList();

  // list of subblocks -- ASTsubblock
  private List subBlocks = new ArrayList();

  public ASTsuite(int id) {
    super(id);
  }

  public ASTsuite(RPLParser p, int id) {
    super(p, id);
  }

  public void preProcess(RPLCompiler compiler) {
    for (int i = 0, n = jjtGetNumChildren(); i < n; i++) {
      SimpleNode node = (SimpleNode)jjtGetChild(i);
      if (node.id == RPLParserTreeConstants.JJTCONSTANT) {
        // constant
        node.preProcess(compiler);
        constants.add(node);
      } else if (node.id == RPLParserTreeConstants.JJTNAME) {
        // plain old reference name (NOT a sub block)
        references.add(node.getInfo().toString());
      } else if (node.id == RPLParserTreeConstants.JJTSUBBLOCK) {
        // subblock
        node.preProcess(compiler);
        subBlocks.add(node);
      }
    }
  }

  /**
   * @return a list of ASTConstant-s
   */
  public List getConstants() {
    return constants;
  }

  /**
   * @return a list of Strings that should be (barring typos etc.) variable
   * names refering to parameters or blocks.
   */
  public List getReferences() {
    return references;
  }

  /**
   * @return a list of ASTsubBlock-s.
   */
  public List getSubBlocks() {
    return subBlocks;
  }

}
