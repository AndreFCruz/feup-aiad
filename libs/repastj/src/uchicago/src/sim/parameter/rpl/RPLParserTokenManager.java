/* Generated By:JJTree&JavaCC: Do not edit this line. RPLParserTokenManager.java */
package uchicago.src.sim.parameter.rpl;

public class RPLParserTokenManager implements RPLParserConstants {
	int indentation[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0 };

	int level = 0;

	int dedents = 0;

	int parens = 0;

	int indent;

	boolean seen_eof = false;

	boolean single_input = false;

	boolean interactive = false;

	boolean compound = false;

	public boolean forcedNewline = false;

	public boolean generator_allowed = false;

	static Token addDedent(Token previous) {
		Token t = new Token();
		t.kind = DEDENT;
		t.beginLine = previous.beginLine;
		t.endLine = previous.endLine;
		t.beginColumn = previous.beginColumn;
		t.endColumn = previous.endColumn;
		t.image = "<DEDENT>";
		t.specialToken = null;
		t.next = null;
		previous.next = t;
		return t;
	}

	void CommonTokenAction(Token t) {
		if (t.kind == EOF) {
			//System.out.println("EOF: "+single_input+", "+curLexState);
			if (!interactive) {
				if (curLexState == DEFAULT) {
					t.kind = NEWLINE;
				} else {
					t.kind = DEDENT;
					level -= 1;
				}
				while (level-- >= 0)
					t = addDedent(t);
				//t = addDedent(t);
				if (!single_input) {
					t.kind = EOF;
					t.image = "<EOF>";
				} else {
					t.kind = NEWLINE;
					t.image = "<FORCENL>";
				}
			}
		}
	}

	public java.io.PrintStream debugStream = System.out;

	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_10(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 56;
				return -1;
			}
			return -1;
		case 1:
			if ((active0 & 0x1000000000000L) != 0L) {
				if (jjmatchedPos == 0) {
					jjmatchedKind = 56;
					jjmatchedPos = 0;
				}
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_10(int pos, long active0) {
		return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
	}

	private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	/*
	 * private final int jjStartNfaWithStates_10(int pos, int kind, int state) {
	 * jjmatchedKind = kind; jjmatchedPos = pos; try { curChar =
	 * input_stream.readChar(); } catch(java.io.IOException e) { return pos + 1; }
	 * return jjMoveNfa_10(state, pos + 1); }
	 */
	private final int jjMoveStringLiteralDfa0_10() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 54);
		case 13:
			jjmatchedKind = 55;
			return jjMoveStringLiteralDfa1_10(0x20000000000000L);
		case 34:
			return jjMoveStringLiteralDfa1_10(0x1000000000000L);
		default:
			return jjMoveNfa_10(0, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_10(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_10(0, active0);
			return 1;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x20000000000000L) != 0L)
				return jjStopAtPos(1, 53);
			break;
		case 34:
			return jjMoveStringLiteralDfa2_10(active0, 0x1000000000000L);
		default:
			break;
		}
		return jjStartNfa_10(0, active0);
	}

	private final int jjMoveStringLiteralDfa2_10(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_10(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_10(1, active0);
			return 2;
		}
		switch (curChar) {
		case 34:
			if ((active0 & 0x1000000000000L) != 0L)
				return jjStopAtPos(2, 48);
			break;
		default:
			break;
		}
		return jjStartNfa_10(1, active0);
	}

	private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	/*
	 * private final void jjCheckNAddStates(int start) {
	 * jjCheckNAdd(jjnextStates[start]); jjCheckNAdd(jjnextStates[start + 1]); }
	 */
	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	private final int jjMoveNfa_10(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 3;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0xffffffffffffdbffL & l) != 0L && kind > 56)
							kind = 56;
						break;
					case 2:
						if ((0xffffffffffffdbffL & l) != 0L && kind > 57)
							kind = 57;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if (kind > 56)
							kind = 56;
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 1:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 2:
						if (kind > 57)
							kind = 57;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((jjbitVec0[i2] & l2) != 0L && kind > 56)
							kind = 56;
						break;
					case 2:
						if ((jjbitVec0[i2] & l2) != 0L && kind > 57)
							kind = 57;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjStopStringLiteralDfa_8(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 52;
				return 2;
			}
			return -1;
		case 1:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 50;
				jjmatchedPos = 1;
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_8(int pos, long active0) {
		return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
	}

	/*
	 * private final int jjStartNfaWithStates_8(int pos, int kind, int state) {
	 * jjmatchedKind = kind; jjmatchedPos = pos; try { curChar =
	 * input_stream.readChar(); } catch(java.io.IOException e) { return pos + 1; }
	 * return jjMoveNfa_8(state, pos + 1); }
	 */
	private final int jjMoveStringLiteralDfa0_8() {
		switch (curChar) {
		case 34:
			return jjStopAtPos(0, 46);
		case 92:
			return jjMoveStringLiteralDfa1_8(0x2000000000000L);
		default:
			return jjMoveNfa_8(0, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_8(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_8(0, active0);
			return 1;
		}
		switch (curChar) {
		case 13:
			return jjMoveStringLiteralDfa2_8(active0, 0x2000000000000L);
		default:
			break;
		}
		return jjStartNfa_8(0, active0);
	}

	private final int jjMoveStringLiteralDfa2_8(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_8(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_8(1, active0);
			return 2;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x2000000000000L) != 0L)
				return jjStopAtPos(2, 49);
			break;
		default:
			break;
		}
		return jjStartNfa_8(1, active0);
	}

	private final int jjMoveNfa_8(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 4;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0xffffffffffffdbffL & l) != 0L && kind > 52)
							kind = 52;
						break;
					case 2:
						if ((0x2400L & l) != 0L) {
							if (kind > 50)
								kind = 50;
						} else if (curChar == 34) {
							if (kind > 52)
								kind = 52;
						}
						break;
					case 3:
						if (curChar == 34 && kind > 52)
							kind = 52;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if (kind > 52)
							kind = 52;
						if (curChar == 92)
							jjAddStates(0, 1);
						break;
					case 2:
						if (curChar == 92 && kind > 52)
							kind = 52;
						break;
					case 1:
						if (curChar == 92)
							jjAddStates(0, 1);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((jjbitVec0[i2] & l2) != 0L && kind > 52)
							kind = 52;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_2() {
		return jjMoveNfa_2(0, 0);
	}

	private final int jjMoveNfa_2(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 1;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x2400L & l) != 0L)
							kind = 7;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				//int i2 = (curChar & 0xff) >> 6;
				//long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_1() {
		return jjMoveNfa_1(0, 0);
	}

	private final int jjMoveNfa_1(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 1;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x2400L & l) != 0L)
							kind = 6;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				//int i2 = (curChar & 0xff) >> 6;
				//long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_6() {
		switch (curChar) {
		case 60:
			return jjMoveStringLiteralDfa1_6(0x8000L);
		default:
			return 1;
		}
	}

	private final int jjMoveStringLiteralDfa1_6(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
		case 73:
			return jjMoveStringLiteralDfa2_6(active0, 0x8000L);
		default:
			return 2;
		}
	}

	private final int jjMoveStringLiteralDfa2_6(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 2;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 2;
		}
		switch (curChar) {
		case 78:
			return jjMoveStringLiteralDfa3_6(active0, 0x8000L);
		default:
			return 3;
		}
	}

	private final int jjMoveStringLiteralDfa3_6(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 3;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 3;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa4_6(active0, 0x8000L);
		default:
			return 4;
		}
	}

	private final int jjMoveStringLiteralDfa4_6(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 4;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 4;
		}
		switch (curChar) {
		case 69:
			return jjMoveStringLiteralDfa5_6(active0, 0x8000L);
		default:
			return 5;
		}
	}

	private final int jjMoveStringLiteralDfa5_6(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 5;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 5;
		}
		switch (curChar) {
		case 78:
			return jjMoveStringLiteralDfa6_6(active0, 0x8000L);
		default:
			return 6;
		}
	}

	private final int jjMoveStringLiteralDfa6_6(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 6;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 6;
		}
		switch (curChar) {
		case 84:
			return jjMoveStringLiteralDfa7_6(active0, 0x8000L);
		default:
			return 7;
		}
	}

	private final int jjMoveStringLiteralDfa7_6(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return 7;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 7;
		}
		switch (curChar) {
		case 62:
			if ((active0 & 0x8000L) != 0L)
				return jjStopAtPos(7, 15);
			break;
		default:
			return 8;
		}
		return 8;
	}

	private final int jjStopStringLiteralDfa_9(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x800000000000L) != 0L) {
				jjmatchedKind = 56;
				return -1;
			}
			return -1;
		case 1:
			if ((active0 & 0x800000000000L) != 0L) {
				if (jjmatchedPos == 0) {
					jjmatchedKind = 56;
					jjmatchedPos = 0;
				}
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_9(int pos, long active0) {
		return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
	}

	/*
	 * private final int jjStartNfaWithStates_9(int pos, int kind, int state) {
	 * jjmatchedKind = kind; jjmatchedPos = pos; try { curChar =
	 * input_stream.readChar(); } catch(java.io.IOException e) { return pos + 1; }
	 * return jjMoveNfa_9(state, pos + 1); }
	 */
	private final int jjMoveStringLiteralDfa0_9() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 54);
		case 13:
			jjmatchedKind = 55;
			return jjMoveStringLiteralDfa1_9(0x20000000000000L);
		case 39:
			return jjMoveStringLiteralDfa1_9(0x800000000000L);
		default:
			return jjMoveNfa_9(0, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_9(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_9(0, active0);
			return 1;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x20000000000000L) != 0L)
				return jjStopAtPos(1, 53);
			break;
		case 39:
			return jjMoveStringLiteralDfa2_9(active0, 0x800000000000L);
		default:
			break;
		}
		return jjStartNfa_9(0, active0);
	}

	private final int jjMoveStringLiteralDfa2_9(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_9(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_9(1, active0);
			return 2;
		}
		switch (curChar) {
		case 39:
			if ((active0 & 0x800000000000L) != 0L)
				return jjStopAtPos(2, 47);
			break;
		default:
			break;
		}
		return jjStartNfa_9(1, active0);
	}

	private final int jjMoveNfa_9(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 3;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0xffffffffffffdbffL & l) != 0L && kind > 56)
							kind = 56;
						break;
					case 2:
						if ((0xffffffffffffdbffL & l) != 0L && kind > 57)
							kind = 57;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if (kind > 56)
							kind = 56;
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 1:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 2:
						if (kind > 57)
							kind = 57;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((jjbitVec0[i2] & l2) != 0L && kind > 56)
							kind = 56;
						break;
					case 2:
						if ((jjbitVec0[i2] & l2) != 0L && kind > 57)
							kind = 57;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	/*
	 * private final int jjStopStringLiteralDfa_4(int pos, long active0) {
	 * switch (pos) { default : return -1; } }
	 */
	/*
	 * private final int jjStartNfa_4(int pos, long active0) { return
	 * jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1); } private
	 * final int jjStartNfaWithStates_4(int pos, int kind, int state) {
	 * jjmatchedKind = kind; jjmatchedPos = pos; try { curChar =
	 * input_stream.readChar(); } catch(java.io.IOException e) { return pos + 1; }
	 * return jjMoveNfa_4(state, pos + 1); }
	 */
	private final int jjMoveStringLiteralDfa0_4() {
		switch (curChar) {
		case 9:
			return jjStopAtPos(0, 9);
		case 12:
			return jjStopAtPos(0, 11);
		case 32:
			return jjStopAtPos(0, 10);
		default:
			return jjMoveNfa_4(1, 0);
		}
	}

	private final int jjMoveNfa_4(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 8;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 1:
						if ((0x2400L & l) != 0L) {
							if (kind > 12)
								kind = 12;
						} else if (curChar == 35)
							jjCheckNAddStates(2, 4);
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 0:
						if (curChar == 10 && kind > 12)
							kind = 12;
						break;
					case 2:
						if ((0x2400L & l) != 0L && kind > 12)
							kind = 12;
						break;
					case 3:
						if (curChar == 35)
							jjCheckNAddStates(2, 4);
						break;
					case 4:
						if ((0xffffffffffffdbffL & l) != 0L)
							jjCheckNAddStates(2, 4);
						break;
					case 5:
						if (curChar == 10 && kind > 17)
							kind = 17;
						break;
					case 6:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 7:
						if ((0x2400L & l) != 0L && kind > 17)
							kind = 17;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 4:
						jjAddStates(2, 4);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 4:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(2, 4);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0xf8000000L) != 0L) {
				jjmatchedKind = 32;
				return 10;
			}
			if ((active0 & 0x1000000L) != 0L)
				return 74;
			return -1;
		case 1:
			if ((active0 & 0xf8000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 1;
				return 10;
			}
			return -1;
		case 2:
			if ((active0 & 0x8000000L) != 0L)
				return 10;
			if ((active0 & 0xf0000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 2;
				return 10;
			}
			return -1;
		case 3:
			if ((active0 & 0x40000000L) != 0L)
				return 10;
			if ((active0 & 0xb0000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 3;
				return 10;
			}
			return -1;
		case 4:
			if ((active0 & 0x80000000L) != 0L)
				return 10;
			if ((active0 & 0x30000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 4;
				return 10;
			}
			return -1;
		case 5:
			if ((active0 & 0x30000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 5;
				return 10;
			}
			return -1;
		case 6:
			if ((active0 & 0x30000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 6;
				return 10;
			}
			return -1;
		case 7:
			if ((active0 & 0x20000000L) != 0L)
				return 10;
			if ((active0 & 0x10000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 7;
				return 10;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 18);
		case 41:
			return jjStopAtPos(0, 19);
		case 44:
			return jjStopAtPos(0, 23);
		case 46:
			return jjStartNfaWithStates_0(0, 24, 74);
		case 58:
			return jjStopAtPos(0, 25);
		case 59:
			return jjStopAtPos(0, 22);
		case 61:
			return jjStopAtPos(0, 26);
		case 91:
			return jjStopAtPos(0, 20);
		case 93:
			return jjStopAtPos(0, 21);
		case 99:
			return jjMoveStringLiteralDfa1_0(0x20000000L);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x8000000L);
		case 102:
			return jjMoveStringLiteralDfa1_0(0x80000000L);
		case 112:
			return jjMoveStringLiteralDfa1_0(0x10000000L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x40000000L);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x90000000L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 102:
			if ((active0 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(2, 27, 10);
			break;
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
		case 114:
			return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
		case 101:
			if ((active0 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(3, 30, 10);
			break;
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0xa0000000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 101:
			if ((active0 & 0x80000000L) != 0L)
				return jjStartNfaWithStates_0(4, 31, 10);
			break;
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
		case 116:
			return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
		case 101:
			return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 110:
			return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
		case 116:
			return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
		case 101:
			return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
		case 116:
			if ((active0 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(7, 29, 10);
			break;
		default:
			break;
		}
		return jjStartNfa_0(6, active0);
	}

	private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0);
			return 8;
		}
		switch (curChar) {
		case 114:
			if ((active0 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(8, 28, 10);
			break;
		default:
			break;
		}
		return jjStartNfa_0(7, active0);
	}

	private final int jjMoveNfa_0(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 74;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 74:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(5, 7);
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddTwoStates(51, 52);
						}
						break;
					case 0:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(8, 15);
						else if ((0x2400L & l) != 0L) {
							if (kind > 5)
								kind = 5;
						} else if (curChar == 46)
							jjCheckNAddTwoStates(51, 55);
						else if (curChar == 45)
							jjCheckNAddStates(16, 19);
						else if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 17;
						else if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 14;
						else if (curChar == 35) {
							if (kind > 16)
								kind = 16;
							jjCheckNAdd(8);
						}
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 34)
								kind = 34;
							jjCheckNAddStates(20, 24);
						} else if (curChar == 48) {
							if (kind > 34)
								kind = 34;
							jjCheckNAddStates(25, 31);
						} else if (curChar == 34) {
							if (kind > 42)
								kind = 42;
						} else if (curChar == 39) {
							if (kind > 41)
								kind = 41;
						} else if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 4;
						break;
					case 1:
						if (curChar == 10 && kind > 4)
							kind = 4;
						break;
					case 2:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 3:
						if ((0x2400L & l) != 0L && kind > 4)
							kind = 4;
						break;
					case 4:
						if (curChar == 10 && kind > 5)
							kind = 5;
						break;
					case 5:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 4;
						break;
					case 6:
						if ((0x2400L & l) != 0L && kind > 5)
							kind = 5;
						break;
					case 7:
						if (curChar != 35)
							break;
						if (kind > 16)
							kind = 16;
						jjCheckNAdd(8);
						break;
					case 8:
						if ((0xffffffffffffdbffL & l) == 0L)
							break;
						if (kind > 16)
							kind = 16;
						jjCheckNAdd(8);
						break;
					case 10:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 32)
							kind = 32;
						jjstateSet[jjnewStateCnt++] = 10;
						break;
					case 11:
						if (curChar == 39 && kind > 41)
							kind = 41;
						break;
					case 12:
						if (curChar == 34 && kind > 42)
							kind = 42;
						break;
					case 13:
						if (curChar == 39 && kind > 43)
							kind = 43;
						break;
					case 14:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 13;
						break;
					case 15:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 14;
						break;
					case 16:
						if (curChar == 34 && kind > 44)
							kind = 44;
						break;
					case 17:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 16;
						break;
					case 18:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 17;
						break;
					case 19:
						if (curChar == 45)
							jjCheckNAddStates(16, 19);
						break;
					case 20:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 34)
							kind = 34;
						jjCheckNAddTwoStates(21, 22);
						break;
					case 21:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 34)
							kind = 34;
						jjCheckNAddTwoStates(21, 22);
						break;
					case 23:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(23, 24);
						break;
					case 24:
						if (curChar != 46)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddTwoStates(25, 26);
						break;
					case 25:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddTwoStates(25, 26);
						break;
					case 27:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(28);
						break;
					case 28:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAdd(28);
						break;
					case 29:
						if ((0x3fe000000000000L & l) != 0L)
							jjCheckNAddStates(32, 34);
						break;
					case 30:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(32, 34);
						break;
					case 33:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(33, 34);
						break;
					case 34:
						if (curChar == 46)
							jjCheckNAddStates(35, 37);
						break;
					case 35:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(35, 37);
						break;
					case 37:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(38);
						break;
					case 38:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(38, 32);
						break;
					case 39:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 34)
							kind = 34;
						jjCheckNAddStates(20, 24);
						break;
					case 40:
						if (curChar != 48)
							break;
						if (kind > 34)
							kind = 34;
						jjCheckNAddStates(25, 31);
						break;
					case 42:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 35)
							kind = 35;
						jjAddStates(38, 39);
						break;
					case 44:
						if ((0xff000000000000L & l) == 0L)
							break;
						if (kind > 36)
							kind = 36;
						jjCheckNAddTwoStates(44, 45);
						break;
					case 46:
						if (curChar == 45)
							jjCheckNAdd(47);
						break;
					case 47:
						if ((0x3fe000000000000L & l) != 0L)
							jjCheckNAddStates(40, 42);
						break;
					case 48:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(40, 42);
						break;
					case 49:
						if (curChar == 48)
							jjCheckNAdd(32);
						break;
					case 50:
						if (curChar == 46)
							jjCheckNAddTwoStates(51, 55);
						break;
					case 51:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddTwoStates(51, 52);
						break;
					case 53:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(54);
						break;
					case 54:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAdd(54);
						break;
					case 55:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(5, 7);
						break;
					case 57:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(58);
						break;
					case 58:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(58, 32);
						break;
					case 65:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(8, 15);
						break;
					case 66:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(66, 67);
						break;
					case 68:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(69);
						break;
					case 69:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAdd(69);
						break;
					case 70:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(70, 71);
						break;
					case 72:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(73);
						break;
					case 73:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(73, 32);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 32)
								kind = 32;
							jjCheckNAdd(10);
						} else if (curChar == 92)
							jjAddStates(0, 1);
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAddStates(43, 46);
						else if ((0x20000000200000L & l) != 0L)
							jjCheckNAddStates(47, 54);
						break;
					case 8:
						if (kind > 16)
							kind = 16;
						jjstateSet[jjnewStateCnt++] = 8;
						break;
					case 9:
					case 10:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 32)
							kind = 32;
						jjCheckNAdd(10);
						break;
					case 22:
						if ((0x100000001000L & l) != 0L && kind > 34)
							kind = 34;
						break;
					case 26:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(55, 56);
						break;
					case 31:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 32:
						if ((0x40000000400L & l) != 0L && kind > 38)
							kind = 38;
						break;
					case 36:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(57, 58);
						break;
					case 41:
						if ((0x100000001000000L & l) != 0L)
							jjCheckNAdd(42);
						break;
					case 42:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 35)
							kind = 35;
						jjCheckNAddTwoStates(42, 43);
						break;
					case 43:
						if ((0x100000001000L & l) != 0L && kind > 35)
							kind = 35;
						break;
					case 45:
						if ((0x100000001000L & l) != 0L && kind > 36)
							kind = 36;
						break;
					case 52:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(59, 60);
						break;
					case 56:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(61, 62);
						break;
					case 59:
						if ((0x20000000200000L & l) != 0L)
							jjCheckNAddStates(47, 54);
						break;
					case 60:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAdd(11);
						break;
					case 61:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAdd(12);
						break;
					case 62:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAdd(15);
						break;
					case 63:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAdd(18);
						break;
					case 64:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAddStates(43, 46);
						break;
					case 67:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(63, 64);
						break;
					case 71:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(65, 66);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 8:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 16)
							kind = 16;
						jjstateSet[jjnewStateCnt++] = 8;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjStopStringLiteralDfa_7(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 51;
				return 2;
			}
			return -1;
		case 1:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 50;
				jjmatchedPos = 1;
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_7(int pos, long active0) {
		return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
	}

	/*
	 * private final int jjStartNfaWithStates_7(int pos, int kind, int state) {
	 * jjmatchedKind = kind; jjmatchedPos = pos; try { curChar =
	 * input_stream.readChar(); } catch(java.io.IOException e) { return pos + 1; }
	 * return jjMoveNfa_7(state, pos + 1); }
	 */
	private final int jjMoveStringLiteralDfa0_7() {
		switch (curChar) {
		case 39:
			return jjStopAtPos(0, 45);
		case 92:
			return jjMoveStringLiteralDfa1_7(0x2000000000000L);
		default:
			return jjMoveNfa_7(0, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_7(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_7(0, active0);
			return 1;
		}
		switch (curChar) {
		case 13:
			return jjMoveStringLiteralDfa2_7(active0, 0x2000000000000L);
		default:
			break;
		}
		return jjStartNfa_7(0, active0);
	}

	private final int jjMoveStringLiteralDfa2_7(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_7(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_7(1, active0);
			return 2;
		}
		switch (curChar) {
		case 10:
			if ((active0 & 0x2000000000000L) != 0L)
				return jjStopAtPos(2, 49);
			break;
		default:
			break;
		}
		return jjStartNfa_7(1, active0);
	}

	private final int jjMoveNfa_7(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 4;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0xffffffffffffdbffL & l) != 0L && kind > 51)
							kind = 51;
						break;
					case 2:
						if ((0x2400L & l) != 0L) {
							if (kind > 50)
								kind = 50;
						} else if (curChar == 39) {
							if (kind > 51)
								kind = 51;
						}
						break;
					case 3:
						if (curChar == 39 && kind > 51)
							kind = 51;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if (kind > 51)
							kind = 51;
						if (curChar == 92)
							jjAddStates(0, 1);
						break;
					case 2:
						if (curChar == 92 && kind > 51)
							kind = 51;
						break;
					case 1:
						if (curChar == 92)
							jjAddStates(0, 1);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((jjbitVec0[i2] & l2) != 0L && kind > 51)
							kind = 51;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_3() {
		return jjMoveNfa_3(0, 0);
	}

	private final int jjMoveNfa_3(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 1;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x2400L & l) != 0L)
							kind = 8;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				//int i2 = (curChar & 0xff) >> 6;
				//long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	/*
	 * private final int jjStopStringLiteralDfa_5(int pos, long active0) {
	 * switch (pos) { default : return -1; } } private final int
	 * jjStartNfa_5(int pos, long active0) { return
	 * jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1); } private
	 * final int jjStartNfaWithStates_5(int pos, int kind, int state) {
	 * jjmatchedKind = kind; jjmatchedPos = pos; try { curChar =
	 * input_stream.readChar(); } catch(java.io.IOException e) { return pos + 1; }
	 * return jjMoveNfa_5(state, pos + 1); }
	 */
	private final int jjMoveStringLiteralDfa0_5() {
		switch (curChar) {
		case 9:
			return jjStopAtPos(0, 9);
		case 12:
			return jjStopAtPos(0, 11);
		case 32:
			return jjStopAtPos(0, 10);
		default:
			return jjMoveNfa_5(1, 0);
		}
	}

	private final int jjMoveNfa_5(int startState, int curPos) {
		//int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 8;
		int i = 1;
		jjstateSet[0] = startState;
		//int j,
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 1:
						if ((0x2400L & l) != 0L) {
							if (kind > 12)
								kind = 12;
						} else if (curChar == 35)
							jjCheckNAddStates(2, 4);
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 0:
						if (curChar == 10 && kind > 12)
							kind = 12;
						break;
					case 2:
						if ((0x2400L & l) != 0L && kind > 12)
							kind = 12;
						break;
					case 3:
						if (curChar == 35)
							jjCheckNAddStates(2, 4);
						break;
					case 4:
						if ((0xffffffffffffdbffL & l) != 0L)
							jjCheckNAddStates(2, 4);
						break;
					case 5:
						if (curChar == 10 && kind > 17)
							kind = 17;
						break;
					case 6:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 7:
						if ((0x2400L & l) != 0L && kind > 17)
							kind = 17;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				//long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 4:
						jjAddStates(2, 4);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 4:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(2, 4);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 2, 3, 4, 6, 7, 55, 56, 32, 23, 24, 66,
			67, 70, 71, 33, 34, 20, 23, 29, 33, 21, 22, 30, 31, 32, 41, 44, 45,
			46, 47, 49, 32, 30, 31, 32, 35, 36, 32, 42, 43, 48, 31, 32, 11, 12,
			15, 18, 60, 11, 61, 12, 62, 15, 63, 18, 27, 28, 37, 38, 53, 54, 57,
			58, 68, 69, 72, 73, };

	public static final String[] jjstrLiteralImages = { "", null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			"\74\111\116\104\105\116\124\76", null, null, "\50", "\51", "\133",
			"\135", "\73", "\54", "\56", "\72", "\75", "\144\145\146",
			"\160\141\162\141\155\145\164\145\162",
			"\143\157\156\163\164\141\156\164", "\164\162\165\145",
			"\146\141\154\163\145", null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, };

	public static final String[] lexStateNames = { "DEFAULT", "FORCE_NEWLINE1",
			"FORCE_NEWLINE2", "FORCE_NEWLINE", "INDENTING",
			"INDENTATION_UNCHANGED", "UNREACHABLE", "IN_STRING11",
			"IN_STRING21", "IN_STRING13", "IN_STRING23", };

	public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 5, 4,
			0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7,
			8, 9, 10, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, };

	static final long[] jjtoToken = { 0x1e07dfffcc1c1L, };

	static final long[] jjtoSkip = { 0x33e3eL, };

	static final long[] jjtoSpecial = { 0x30000L, };

	static final long[] jjtoMore = { 0x3fe1e0000000000L, };

	private SimpleCharStream input_stream;

	private final int[] jjrounds = new int[74];

	private final int[] jjstateSet = new int[148];

	StringBuffer image;

	int jjimageLen;

	int lengthOfMatch;

	protected char curChar;

	public RPLParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	public RPLParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 74; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	public void SwitchTo(int lexState) {
		if (lexState >= 11 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	private final Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		if (jjmatchedPos < 0) {
			t.image = "";
			t.beginLine = t.endLine = input_stream.getBeginLine();
			t.beginColumn = t.endColumn = input_stream.getBeginColumn();
		} else {
			String im = jjstrLiteralImages[jjmatchedKind];
			t.image = (im == null) ? input_stream.GetImage() : im;
			t.beginLine = input_stream.getBeginLine();
			t.beginColumn = input_stream.getBeginColumn();
			t.endLine = input_stream.getEndLine();
			t.endColumn = input_stream.getEndColumn();
		}
		return t;
	}

	int curLexState = 0;

	int defaultLexState = 0;

	int jjnewStateCnt;

	int jjround;

	int jjmatchedPos;

	int jjmatchedKind;

	public final Token getNextToken() {
		//int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				CommonTokenAction(matchedToken);
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;

			for (;;) {
				switch (curLexState) {
				case 0:
					try {
						input_stream.backup(0);
						while (curChar <= 32
								&& (0x100001200L & (1L << curChar)) != 0L)
							curChar = input_stream.BeginToken();
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_0();
					break;
				case 1:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_1();
					break;
				case 2:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_2();
					break;
				case 3:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_3();
					break;
				case 4:
					jjmatchedKind = 14;
					jjmatchedPos = -1;
					curPos = 0;
					curPos = jjMoveStringLiteralDfa0_4();
					break;
				case 5:
					jjmatchedKind = 13;
					jjmatchedPos = -1;
					curPos = 0;
					curPos = jjMoveStringLiteralDfa0_5();
					break;
				case 6:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_6();
					break;
				case 7:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_7();
					break;
				case 8:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_8();
					break;
				case 9:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_9();
					break;
				case 10:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_10();
					break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos)
						input_stream.backup(curPos - jjmatchedPos - 1);
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						TokenLexicalActions(matchedToken);
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						CommonTokenAction(matchedToken);
						return matchedToken;
					} else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
							matchedToken = jjFillToken();
							if (specialToken == null)
								specialToken = matchedToken;
							else {
								matchedToken.specialToken = specialToken;
								specialToken = (specialToken.next = matchedToken);
							}
							SkipLexicalActions(matchedToken);
						} else
							SkipLexicalActions(null);
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						continue EOFLoop;
					}
					MoreLexicalActions();
					if (jjnewLexState[jjmatchedKind] != -1)
						curLexState = jjnewLexState[jjmatchedKind];
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					} catch (java.io.IOException e1) {
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				} catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					} else
						error_column++;
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line,
						error_column, error_after, curChar,
						TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

	final void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
		case 5:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			if (parens == 0) {
				indent = 0;
				input_stream.backup(1);
				if (level == 0)
					SwitchTo(FORCE_NEWLINE1);
				else
					SwitchTo(FORCE_NEWLINE2);
			}
			break;
		case 9:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			indent = (indent / 8 + 1) * 8;
			if (indent == indentation[level])
				SwitchTo(INDENTATION_UNCHANGED);
			else
				SwitchTo(INDENTING);
			break;
		case 10:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			indent += 1;
			if (indent == indentation[level])
				SwitchTo(INDENTATION_UNCHANGED);
			else
				SwitchTo(INDENTING);
			break;
		case 11:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			indent = 0;
			if (indent == indentation[level])
				SwitchTo(INDENTATION_UNCHANGED);
			else
				SwitchTo(INDENTING);
			break;
		case 12:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			if (parens == 0 && single_input && indent == 0) {
				//System.out.println("force newline");
				//backup a character!
				forcedNewline = true;
				if (interactive) {
					input_stream.backup(1);
					SwitchTo(FORCE_NEWLINE);
				} else {
					SwitchTo(INDENTING);
				}
			} else {
				//doPrompt();
				indent = 0;
				if (indent == indentation[level])
					SwitchTo(INDENTATION_UNCHANGED);
				else
					SwitchTo(INDENTING);
			}
			break;
		case 17:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			indent = 0;
			if (indent == indentation[level])
				SwitchTo(INDENTATION_UNCHANGED);
			else
				SwitchTo(INDENTING);
			break;
		default:
			break;
		}
	}

	final void MoreLexicalActions() {
		jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
		switch (jjmatchedKind) {
		case 49:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen)));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen)));
			jjimageLen = 0;
			image.setLength(image.length() - 3);
			break;
		case 50:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen)));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen)));
			jjimageLen = 0;
			image.setLength(image.length() - 2);
			break;
		case 53:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen)));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen)));
			jjimageLen = 0;
			int l = image.length();
			image.setLength(l - 1);
			image.setCharAt(l - 2, '\n');
			break;
		case 55:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen)));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen)));
			jjimageLen = 0;
			image.setCharAt(image.length() - 1, '\n');
			break;
		default:
			break;
		}
	}

	final void TokenLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
		case 7:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			matchedToken.kind = NEWLINE;
			break;
		case 8:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			Token t1 = matchedToken;
			//System.out.println("final_newline: "+level);
			t1.kind = DEDENT;
			while (level-- > 0)
				t1 = addDedent(t1);
			t1.kind = NEWLINE;
			break;
		case 14:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			if (indent > indentation[level]) {
				level++;
				indentation[level] = indent;
				matchedToken.kind = INDENT;
				matchedToken.image = "<INDENT>";
			} else if (level > 0) {
				Token t = matchedToken;
				level -= 1;
				while (level > 0 && indent < indentation[level]) {
					level--;
					t = addDedent(t);
				}
				if (indent != indentation[level]) {
					throw new TokenMgrError("inconsistent dedent", t.endLine,
							t.endColumn);
				}
				t.next = null;
			}
			break;
		case 18:
			if (image == null)
				image = new StringBuffer(jjstrLiteralImages[18]);
			else
				image.append(jjstrLiteralImages[18]);
			parens++;
			break;
		case 19:
			if (image == null)
				image = new StringBuffer(jjstrLiteralImages[19]);
			else
				image.append(jjstrLiteralImages[19]);
			parens--;
			break;
		case 20:
			if (image == null)
				image = new StringBuffer(jjstrLiteralImages[20]);
			else
				image.append(jjstrLiteralImages[20]);
			parens++;
			break;
		case 21:
			if (image == null)
				image = new StringBuffer(jjstrLiteralImages[21]);
			else
				image.append(jjstrLiteralImages[21]);
			parens--;
			break;
		case 45:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			matchedToken.image = image.toString();
			break;
		case 46:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			matchedToken.image = image.toString();
			break;
		case 47:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			matchedToken.image = image.toString();
			break;
		case 48:
			if (image == null)
				image = new StringBuffer(new String(input_stream
						.GetSuffix(jjimageLen
								+ (lengthOfMatch = jjmatchedPos + 1))));
			else
				image.append(new String(input_stream.GetSuffix(jjimageLen
						+ (lengthOfMatch = jjmatchedPos + 1))));
			matchedToken.image = image.toString();
			break;
		default:
			break;
		}
	}
}