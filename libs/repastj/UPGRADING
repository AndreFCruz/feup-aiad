FROM 2.0 to 2.2

The demo source is no longer part of the main source tree. It has been
moved to the individual demo directories under the demo directory.

RePast now requires java version 1.4 or better.

FROM previous version to 2.0+

The scheduling mechanism has been changed to make RePast more of a
discrete event simulator. This has always been implicit in the
scheduling mechanism but the changes make this explicit. In short,
time (that is, the tick count) only proceeds when a scheduled action
is executed and the tick count itself is indexed to the execution time
of a scheduled action. So for example, if there are two actions A and
B where A is scheduled for tick 2 and B is scheduled for tick 5, then
the tick count will jump to tick two and execute A and then to tick 5
and execute B. The intervening ticks are never shown on the tick count
display. In this way, simulation time is determined by the scheduling
and execution of actions.

Its important to realize, however, that this change will be only be
apparent in those simulations with dynamic and / or irregular
scheduling. If a simulation simply schedules, for example, an action
to execute at tick one and every tick thereafter, then the simulation
should run as before. Previously, RePast iterated through every
integer tick checking for scheduled actions to execute. It no longer
does this; action execution is now a matter of pulling the next
scheduled action off a queue, executing it, and updating the tick
count accordingly. The mousetrap demo simulation is an example of this
new scheme. The tick count jumps ahead to whenever the next action is
scheduled.  If there are no actions scheduled, the simulation will
"wait" with the simulation tick clock stopped.

The old scheme of iterating through every integer tick no longer works
as RePast now allows for scheduling of actions at fractions of a tick,
at 2.5 for example. This has some important ramifications with respect
to the schedule execution interval and the repeated execution of
actions. (As before the default schedule execution interval remains
one.) Previously the execution interval was of little use. Now, it is
the interval at which regularly scheduled actions (actions scheduled
with scheduleActionBeginning(...))  execute. For example, if action A
is scheduled to execute beginning at .5, it will execute at .5 and
then at 1.5, 2.5, 3.5 and so on into the future, assuming that the
schedule execution interval is 1. Anything scheduled to execute at or
start execution at 0 will execute or start execution at the schedule
execution interval.

The other major addition to the schedule mechanism is the introduction
of true threaded background actions. To create such an action, some
BasicAction is scheduled for execution just as before. However, there
is now an additional parameter for defining the duration of such an
action. The duration specifies how long such an action should execute
in the background. For example, if action A is scheduled for execution
at tick 3 with a duration of 4, it will start executing at 3 and then
continue executing while any other actions scheduled for the
intervening four ticks are executed. Once 4 ticks have passed, the
execution engine will wait until this action A has finished
executing. Its important to note here that action is A is not
repeatedly executed here in the intervening ticks. Rather, the
execution mechanism calls action A's execute method and then rather
than waiting for it to finish as it normally would, it immediately
executes the next scheduled action while A's execute method continues
to execute in the background. Only when an amount of ticks equal to
the duration has passed, will the execution mechanism stop and wait
for action A to finish.

Its worth noting here that programming with threads (which is what you
are doing if you use actions with duration) is tricky.  The action
should be some quasi-independent computationally expensive process
that does not interfere with the rest of your model. At the very
least, it should itself not update the display or anything visualized
by the display, at least not until it is finished. The use of such
threaded actions will be easier in a batch environment, but with
sufficient care it should be possible to use them in a gui environment
as well.

1. Package changes:

Node moved from uchicago.src.sim.space to uchicago.src.sim.network
Edge moved from uchicago.src.sim.space to uchicago.src.sim.network
DefaultDrawableEdge moved from uchicago.src.sim.gui to
uchicago.src.sim.network

This is easily fixed by moving references to:
uchicago.src.sim.space.Node, uchicago.src.sim.space.Edge and
uchicago.src.sim.gui.DefaultDrawableEdge to uchicago.src.sim.network.Node,
uchicago.src.sim.network.Edge, and uchicago.src.sim.network.DefaultDrawableEdge
respectively.

2. Inteface additions:

Node.hasEdgeTo()
Node.hasEdgeFrom()

If you have written a class or classes that implement the Node interface you'll
have to implement these new methods as well.

3. Interface removals:

Node.getNode()

The primary use for the getNode method was to enable the proper
drawing and layout of Nodes that were wrapped in drawable nodes such
as OvalNode and RectNode. For a variety of reasons, this way of
drawing nodes has been entirely abandoned in favor of the new way of
visualizing nodes that was introduced in 1.4. If you have visualized
nodes using wrappers, you'll have to update your code. The new way is
quite easy. Drawing is done via a NetworkDrawable and a
DefaultDrawableNode (or some sub class of this).  Here,
DefaultDrawableNode takes care of the network type operations and
NetworkDrawable takes care of the drawing. There are two kinds of
NetworkDrawables, OvalNetworkItem and RectNetworkItem. You pass one of
these or one of your own in when you construct a DefaultDrawableNode.
At that point, you can use the drawing operations in the
DefaultDrawableNode.  If you need help making this transition, feel
free to write the repast-interest list. There is also additional info
in the network how-to in the repast 1.4.1 docs.


FROM previous versions to 1.4

The API for DrawableNonGridNodes has been changed. The x and y
coordinates are now expressed as doubles rather than ints. If you have
created your own DrawableNonGridNodes you'll have to change them to
reflect this. If not, everything should work fine, although you may
need to change a few "int" to "double" here and there. Any questions,
please contact the mailing list: repast-interest@lists.sourceforge.net

FROM 1.2 TO 1.3

There have been some major changes to parts of the
uchicago.src.sim.network package API. These are detailed below.

1. The Node interface now includes a getNode() method. The
intention of this method is for Nodes such as
DrawableNonGridNode that forward all the their Node interface
methods to a wrapped Node to return the wrapped Node.

This will impact any classes that implement the Node interface.
DefaultNode, of course, reflects this change and returns itself
from the getNode method.

2. DefaultEdge now sets its from and to Nodes via calls to
Node.getNode(). So, for example, doing setTo(aNode), sets the to
node of a DefaultEdge to the node that aNode returns from its
getNode() method. This might cause problems for people who
have implemented their own DrawableGridNodes.

3. setX and setY methods have been added to the DrawableNonGridNode
class. This allows DrawableNonGridNodes to be laid out via
a GraphLayout.

4. A side effect of the above changes is that you no longer need
add the Edges created via a NetworkFactory.getNetwork(...) call
to any wrapper DrawableNonGridNodes. Simply wrapping the
created Node will suffice. In fact, doing any more will probably
break the simulation.

5. NetworkFactory.getNetwork(String, int, Class, Class) has
been deprecated. Use NetworkFactory.createNetwork((String, int, Class, Class,
int) instead. See the API docs for details.

6. Like the above, some NetworkRecorder.record() methods have been
deprecated. See the API docs for details.

Questions, comments, or concerns? Contact repast@src.uchicago.edu,
or repast-interest@lists.sourceforge.net

FROM 1.1 TO 1.2

Users who are upgrading from previous versions
might experience a few problems due to API
and name changes.

The ObjectDateRecorder API has been
changed. Update your model to use this
new API. See the RePast API docs for
details.

uchicago.src.sim.space.AbstractNode and
uchicago.src.sim.space.AbstractEdge have
become uchicago.src.sim.network.DefaultNode
and uchicago.src.sim.network.DefaultEdge.
The API remains the same only the names
and packages have changed please change
your model's accordingly.

Now that parameter files can be used
with gui models, the presence of a
parameter file no longer indicates a
batch model. If you are running a batch model
you'll need to specify the -b switch to
SimInit. For example,

java -cp ... uchicago.src.sim.engine.SimInit -b MyBatchModel
MyParameters
